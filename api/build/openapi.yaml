openapi: 3.0.3
info:
  title: CRUD API
  description: CRUD API
  version: 1.0.0
servers:
  - url: 'http://localhost:8080'
    description: dev
paths:
  /accounts:
    get:
      summary: Return list of Account
      tags:
        - Account
      description: Optional extended description in CommonMark or HTML
      parameters:
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: A JSON array of Account
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Account'
    post:
      summary: Create Account
      tags:
        - Account
      description: Optional extended description in CommonMark or HTML
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
      responses:
        '201':
          $ref: '#/components/responses/Created'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  '/accounts/{id}':
    delete:
      summary: Delete Account by ID
      tags:
        - Account
      description: Optional extended description in CommonMark or HTML
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    get:
      summary: Get Account by ID
      tags:
        - Account
      description: Optional extended description in CommonMark or HTML
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: Account object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    patch:
      summary: Update specified fields of Account
      tags:
        - Account
      description: Optional extended description in CommonMark or HTML
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
      responses:
        '200':
          $ref: '#/components/responses/OK'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      summary: Replace Account if exists
      tags:
        - Account
      description: Optional extended description in CommonMark or HTML
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
      responses:
        '200':
          $ref: '#/components/responses/OK'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /permissions:
    get:
      summary: Return list of Permission
      tags:
        - Permissions
      description: Optional extended description in CommonMark or HTML
      parameters:
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: A JSON array of Permission
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Permission'
    post:
      summary: Create Permission
      tags:
        - Permissions
      description: Optional extended description in CommonMark or HTML
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Permission'
      responses:
        '201':
          $ref: '#/components/responses/Created'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  '/permissions/{id}':
    delete:
      summary: Delete Permission by ID
      tags:
        - Permissions
      description: Optional extended description in CommonMark or HTML
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    get:
      summary: Get Permission by ID
      tags:
        - Permissions
      description: Optional extended description in CommonMark or HTML
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: Permission object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Permission'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    patch:
      summary: Update specified fields of Permission
      tags:
        - Permissions
      description: Optional extended description in CommonMark or HTML
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Permission'
      responses:
        '200':
          $ref: '#/components/responses/OK'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      summary: Replace Permission if exists
      tags:
        - Permissions
      description: Optional extended description in CommonMark or HTML
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Permission'
      responses:
        '200':
          $ref: '#/components/responses/OK'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /services:
    get:
      summary: Return list of Service
      tags:
        - Service
      description: Optional extended description in CommonMark or HTML
      parameters:
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: A JSON array of Service
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Service'
    post:
      summary: Create Service
      tags:
        - Service
      description: Optional extended description in CommonMark or HTML
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
      responses:
        '201':
          $ref: '#/components/responses/Created'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  '/services/{id}':
    delete:
      summary: Delete Service by ID
      tags:
        - Service
      description: Optional extended description in CommonMark or HTML
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    get:
      summary: Get Service by ID
      tags:
        - Service
      description: Optional extended description in CommonMark or HTML
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: Service object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    patch:
      summary: Update specified fields of Service
      tags:
        - Service
      description: Optional extended description in CommonMark or HTML
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
      responses:
        '200':
          $ref: '#/components/responses/OK'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      summary: Replace Service if exists
      tags:
        - Service
      description: Optional extended description in CommonMark or HTML
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
      responses:
        '200':
          $ref: '#/components/responses/OK'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
components:
  parameters:
    id:
      name: id
      in: path
      required: true
      description: The id of the resource to retrieve
      schema:
        type: integer
        format: uint64
    limit:
      name: limit
      in: query
      description: How many items to return at one time
      required: false
      schema:
        type: integer
        format: uint32
    offset:
      name: offset
      in: query
      description: How many items to skip
      required: false
      schema:
        type: integer
        format: uint32
    sort:
      name: sort
      in: query
      required: false
      description: Sort order
      schema:
        type: object
        additionalProperties:
          type: string
          enum:
            - asc
            - desc
  responses:
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    UnexpectedError:
      description: Unexpected error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NullResponse:
      description: Null response
    Created:
      description: Created
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BaseModel'
    OK:
      description: OK
    NoContent:
      description: No content
  schemas:
    Account:
      allOf:
        - $ref: '#/components/schemas/BaseModel'
        - type: object
          required:
            - name
          properties:
            name:
              type: string
            blocked:
              type: boolean
    Any:
      description: 'Can be any value - string, number, boolean, array or object.'
    AnyNull:
      description: 'Can be any value - string, number, boolean, array, object or null.'
    BaseModel:
      type: object
      required:
        - id
        - created_at
        - updated_at
        - deleted_at
      properties:
        id:
          type: integer
          format: uint64
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        deleted_at:
          type: string
          format: date-time
          readOnly: true
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    Permission:
      allOf:
        - $ref: '#/components/schemas/BaseModel'
        - type: object
          required:
            - name
            - account_id
            - service_id
            - user_id
          properties:
            name:
              type: string
            account_id:
              type: integer
            service_id:
              type: integer
            user_id:
              type: integer
    Service:
      allOf:
        - $ref: '#/components/schemas/BaseModel'
        - type: object
          required:
            - name
          properties:
            name:
              type: string
